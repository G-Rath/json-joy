import type {TsNode} from './types';

export const TAB = '  ';

export const keywords: Record<string, 1 | undefined> = {
  break: 1,
  case: 1,
  catch: 1,
  class: 1,
  const: 1,
  continue: 1,
  debugger: 1,
  default: 1,
  delete: 1,
  do: 1,
  else: 1,
  enum: 1,
  export: 1,
  extends: 1,
  false: 1,
  finally: 1,
  for: 1,
  function: 1,
  if: 1,
  import: 1,
  in: 1,
  instanceof: 1,
  new: 1,
  null: 1,
  return: 1,
  super: 1,
  switch: 1,
  this: 1,
  throw: 1,
  true: 1,
  try: 1,
  typeof: 1,
  var: 1,
  void: 1,
  while: 1,
  with: 1,
  as: 1,
  implements: 1,
  interface: 1,
  let: 1,
  package: 1,
  private: 1,
  protected: 1,
  public: 1,
  static: 1,
  yield: 1,
  any: 1,
  boolean: 1,
  constructor: 1 as 1,
  declare: 1,
  get: 1,
  module: 1,
  require: 1,
  number: 1,
  set: 1,
  string: 1,
  symbol: 1,
  type: 1,
  from: 1,
  of: 1,
  unknown: 1,
};

export const normalizeKey = (prop: string): string =>
  /^[a-z_][a-z_0-9]*$/i.test(prop) && !keywords[prop] ? prop : JSON.stringify(prop);

export const isSimpleType = ({node}: TsNode): boolean =>
  node === 'NumberKeyword' || node === 'StringKeyword' || node === 'BooleanKeyword';
